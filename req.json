{
  "language": "java",
  "code": "/**\n * DemoLargeClass: 用于测试长代码切分。\n * 包含多个方法、注释、控制语句、泛型、内部类等，确保能覆盖 parser 的各种情况。\n */\npackage com.example.demo;\n\nimport java.io.*;\nimport java.util.*;\nimport java.util.stream.*;\n\npublic class DemoLargeClass {\n\n    /** 构造器 */\n    public DemoLargeClass() {\n        System.out.println(\"DemoLargeClass init\");\n    }\n\n    /** 简单求和 */\n    public int sum(List<Integer> nums) {\n        int s = 0;\n        for (int n : nums) {\n            s += n;\n        }\n        return s;\n    }\n\n    /**\n     * 过滤偶数并排序\n     * @param nums 输入列表\n     * @return 偶数升序排列\n     */\n    public List<Integer> filterEven(List<Integer> nums) {\n        if (nums == null) return Collections.emptyList();\n        return nums.stream().filter(x -> x % 2 == 0).sorted().collect(Collectors.toList());\n    }\n\n    /**\n     * 演示 try-with-resources\n     */\n    public String readFile(String path) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        try (BufferedReader br = new BufferedReader(new FileReader(path))) {\n            String line;\n            while ((line = br.readLine()) != null) {\n                sb.append(line).append(\"\\n\");\n            }\n        }\n        return sb.toString();\n    }\n\n    /**\n     * 超长方法 bigMethod: 用于触发 method_block 拆分\n     */\n    public String bigMethod(List<String> items) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"BEGIN\\n\");\n        for (int round = 0; round < 30; round++) {\n            sb.append(\"ROUND-\").append(round).append(\"\\n\");\n            for (int i = 0; i < 100; i++) {\n                sb.append(\"line-\").append(i).append(\": Lorem ipsum dolor sit amet, consectetur adipiscing elit.\").append(\"\\n\");\n            }\n            if (round % 5 == 0) {\n                sb.append(\"branch special\\n\");\n            }\n        }\n        if (items != null) {\n            for (int j = 0; j < items.size(); j++) {\n                sb.append(\"ITEM[\").append(j).append(\"] = \").append(items.get(j)).append(\"\\n\");\n            }\n        }\n        sb.append(\"END\\n\");\n        return sb.toString();\n    }\n\n    /** 内部类 Pair */\n    public static class Pair<K, V> {\n        public final K key;\n        public final V value;\n        public Pair(K k, V v) { this.key = k; this.value = v; }\n        public static <K,V> Pair<K,V> of(K k, V v) { return new Pair<>(k,v); }\n    }\n\n    /** 枚举类型 Status */\n    public enum Status {\n        READY, RUNNING, FINISHED, FAILED\n    }\n\n    /**\n     * 混合调用 runAll\n     */\n    public void runAll(List<Integer> nums, List<String> items) throws IOException {\n        System.out.println(\"sum=\" + sum(nums));\n        System.out.println(\"even=\" + filterEven(nums));\n        System.out.println(\"fileContent length=\" + readFile(\"/etc/hosts\").length());\n        System.out.println(\"bigMethod length=\" + bigMethod(items).length());\n    }\n}\n",
  "max_chars": 1000
}
